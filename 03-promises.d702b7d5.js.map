{"version":3,"sources":["js/03-promises.js"],"names":["refs","formEl","document","querySelector","delayEl","stepEl","amountEl","onSumbitForm","e","preventDefault","firstDylayValue","Number","value","nextDelayValue","amountValue","i","createPromise","then","position","delay","console","log","catch","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener"],"mappings":";AAAA,MAAMA,EAAO,CACXC,OAAQC,SAASC,cAAc,SAC/BC,QAASF,SAASC,cAAc,uBAChCE,OAAQH,SAASC,cAAc,sBAC/BG,SAAUJ,SAASC,cAAc,yBAKnC,SAASI,EAAaC,GACpBA,EAAEC,iBAEEC,IAAAA,EAAkBC,OAAOX,EAAKI,QAAQQ,OACpCC,MAAAA,EAAiBF,OAAOX,EAAKK,OAAOO,OACpCE,EAAcH,OAAOX,EAAKM,SAASM,OAEpC,IAAA,IAAIG,EAAI,EAAGA,GAAKD,EAAaC,GAAK,EACrCC,EAAcD,EAAGL,GACdO,KAAK,EAAGC,SAAAA,EAAUC,MAAAA,MACjBC,QAAQC,2BAA2BH,QAAeC,SAEnDG,MAAM,EAAGJ,SAAAA,EAAUC,MAAAA,MAClBC,QAAQC,0BAA0BH,QAAeC,SAGrDT,GAAmBG,EAIvB,SAASG,EAAcE,EAAUC,GACxB,OAAA,IAAII,QAAQ,CAACC,EAASC,KACrBC,MAAAA,EAAgBC,KAAKC,SAAW,GAEtCC,WAAW,KACLH,EACFF,EAAQ,CAAEN,SAAAA,EAAUC,MAAAA,IAEpBM,EAAO,CAAEP,SAAAA,EAAUC,MAAAA,KAEpBA,KAhCPnB,EAAKC,OAAO6B,iBAAiB,SAAUvB","file":"03-promises.d702b7d5.js","sourceRoot":"../src","sourcesContent":["const refs = {\n  formEl: document.querySelector('.form'),\n  delayEl: document.querySelector('input[name=\"delay\"]'),\n  stepEl: document.querySelector('input[name=\"step\"]'),\n  amountEl: document.querySelector('input[name=\"amount\"]'),\n};\n\nrefs.formEl.addEventListener('submit', onSumbitForm);\n\nfunction onSumbitForm(e) {\n  e.preventDefault();\n\n  let firstDylayValue = Number(refs.delayEl.value);\n  const nextDelayValue = Number(refs.stepEl.value);\n  const amountValue = Number(refs.amountEl.value);\n\n  for (let i = 1; i <= amountValue; i += 1) {\n    createPromise(i, firstDylayValue)\n      .then(({ position, delay }) => {\n        console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n\n    firstDylayValue += nextDelayValue;\n  }\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"]}